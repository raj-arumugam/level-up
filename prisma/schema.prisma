// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  passwordHash          String
  firstName             String
  lastName              String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  
  // Relations
  stockPositions        StockPosition[]
  notificationSettings  NotificationSettings?
  dailyReports          DailyReport[]
  
  @@map("users")
}

model StockPosition {
  id            String   @id @default(cuid())
  userId        String
  symbol        String
  companyName   String
  quantity      Float
  purchasePrice Float
  purchaseDate  DateTime
  currentPrice  Float?
  sector        String?
  marketCap     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("stock_positions")
  @@index([userId])
  @@index([symbol])
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailEnabled          Boolean  @default(true)
  dailyUpdateEnabled    Boolean  @default(true)
  updateTime            String   @default("09:00") // HH:MM format
  alertThreshold        Float    @default(5.0) // Percentage threshold for significant moves
  weekendsEnabled       Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_settings")
}

model DailyReport {
  id                    String   @id @default(cuid())
  userId                String
  reportDate            DateTime
  portfolioValue        Float
  dailyChange           Float
  dailyChangePercent    Float
  significantMovers     Json     // Array of stock positions with significant moves
  sectorPerformance     Json     // Sector performance data
  marketSummary         String?
  emailSent             Boolean  @default(false)
  emailSentAt           DateTime?
  createdAt             DateTime @default(now())
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("daily_reports")
  @@index([userId])
  @@index([reportDate])
  @@unique([userId, reportDate])
}

model MarketData {
  id            String   @id @default(cuid())
  symbol        String   @unique
  companyName   String
  currentPrice  Float
  previousClose Float
  changePercent Float
  volume        BigInt?
  marketCap     String?
  sector        String?
  lastUpdated   DateTime @default(now())
  
  @@map("market_data")
  @@index([symbol])
  @@index([lastUpdated])
}
